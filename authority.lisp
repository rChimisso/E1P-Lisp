(defpackage authority
	(:use :cl :gen-machine)
	(:export :make-machine :parse :host :userinfo :port :leftover :valid)
)
(in-package authority)
(defclass machine (gen-machine) (
	(userinfo :initform nil :accessor userinfo)
	(host :initform nil :accessor host)
	(port :initform nil :accessor port)
))
(defun make-machine (chars) (make-instance 'machine :leftover chars))
(defmethod setv ((m machine) &key userinfo host port)
	(setf
		(values (userinfo m) (host m) (port m) (state m))
		(values userinfo host port "final")
	)
)
(defmethod authority-start-p ((m machine) &optional (depth 2))
	(consume m)
	(if (> depth 0)
		(if (char= (current m) #\/) (authority-start-p m (1- depth)))
		(unconsume m)
	)
)
(defmethod parse ((m machine))
	(if (authority-start-p m)
		(let
			(
				(user-machine (userinfo:make-machine (leftover m)))
				(host-machine (host:make-machine nil))
				(port-machine (port:make-machine nil))
			)
			(userinfo:parse user-machine)
			(if (string= (userinfo:state user-machine) "at")
				(progn
					(setf (host:leftover host-machine) (userinfo:leftover user-machine))
					(host:parse host-machine)
					(if	(host:valid host-machine)
						(progn
							(setf (port:leftover port-machine) (host:leftover host-machine))
							(port:parse port-machine)
							(if (port:valid port-machine)
								(setv m
									:userinfo (userinfo:value user-machine)
									:host (host:value host-machine)
									:port (port:value port-machine)
								)
								(move m "error")
							)
						)
						(move m "error")
					)
				)
				(progn
					(setf (host:leftover host-machine) (leftover m))
					(host:parse host-machine)
					(if	(host:valid host-machine)
						(progn
							(setf (port:leftover port-machine) (host:leftover host-machine))
							(port:parse port-machine)
							(if (port:valid port-machine)
								(setv m
									:host (host:value host-machine)
									:port (port:value port-machine)
								)
								(move m "error")
							)
						)
						(move m "error")
					)
				)
			)
		)
		(move m "error")
	)
)
